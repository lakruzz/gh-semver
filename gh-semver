#!/usr/bin/env bash

# Function to check if puython is installed
ensure_python() {
    if ! command -v python3 &> /dev/null; then
        echo "Python 3 not found. Please install Python 3."
        exit 1
    fi
}


# Function to check if pipenv is installed and provide instructions if not
check_pipenv() {
    if ! command -v pipenv &> /dev/null; then
        echo "This scripts is designed to run in an isolated pipenv environment."
        echo "...but pipenv is not installed on your system."
        echo "Given the myriad of ways to install pipenv, we leave it up to you fix it yourself."
        echo "Here are some common ways:"
        echo "1. Using pip (recommended for most users):"
        echo "   python3 -m pip install --user pipenv"
        echo "2. Using Homebrew (recommended for macOS users):"
        echo "   brew install pipenv"
        echo "3. Using pipx (alternative method):"
        echo "   brew install pipx"
        echo "   pipx install pipenv"
        exit 1
    fi
}

# Check if pipenv is installed
if ! command -v pipenv &> /dev/null; then
    echo "pipenv not found. Installing pipenv..."
    pip install --user pipenv
    # Add the user base's bin directory to PATH
    export PATH="$PATH:$(python3 -m site --user-base)/bin"
fi

## Main script

ensure_python
check_pipenv


# Attempt to get the virtual environment path
pipenv --venv > /dev/null 2>&1

export PIPENV_VERBOSITY=-1

# If pipenv --venv failed, it means no virtual environment exists
if [ $? -ne 0 ]; then
    echo "First time around - Setting up pipenv environment..."
    pipenv sync > /dev/null 2>&1
fi

pipenv run python $(dirname "$0")/gh_semver.py "$@"
